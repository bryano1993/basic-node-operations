1.Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

A: Sort will return the file sorted alphabetically by line. The output was 

      //we will add the functionality of echo next within the object commandLibrary
      break;
      break;
      commandLibrary.cat(userInputArray.slice(1));
      commandLibrary.echo(userInputArray.slice(1).join(" "));
      done(data);
      if (err) throw err;
    });
    case "cat":
    case "echo":
    const fileName = fullPath[0];
    done(userInput);
    fs.readFile(fileName, (err, data) => {
  //parses the user input to understand which command was typed
  //the echo command
  }
  }
  },
  cat: function(fullPath) {
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  echo: function(userInput) {
  process.stdout.write("\nprompt > ");
  process.stdout.write(output);
  switch (command) {





//where we will store our commands
//where we will store the logic of our commands
//write out data
}
}
};
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;



wc will will print the amount of newlines, words, and bytes for a file. The output was 

 42  116 1091 commands.js

uniq will sort each line in a file and only return different lines. If there is a line in a file that is the same as the line above it, uniq will remove it from the output.
The output is 

const fs = require("fs");

//write out data
function done(output) {
  process.stdout.write(output);
  process.stdout.write("\nprompt > ");
}

//where we will store our commands
function evaluateCmd(userInput) {
  //parses the user input to understand which command was typed
  const userInputArray = userInput.split(" ");
  const command = userInputArray[0];

  switch (command) {
    case "echo":
      //we will add the functionality of echo next within the object commandLibrary
      commandLibrary.echo(userInputArray.slice(1).join(" "));
      break;
    case "cat":
      commandLibrary.cat(userInputArray.slice(1));
      break;
  }
}

//where we will store the logic of our commands
const commandLibrary = {
  //the echo command
  echo: function(userInput) {
    done(userInput);
  },
  cat: function(fullPath) {
    const fileName = fullPath[0];
    fs.readFile(fileName, (err, data) => {
      if (err) throw err;
      done(data);
    });
  }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;


2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

uniq commands.js | wc

This data was outputted because the uniq commands.js performed its command and sorted each line in a file and only returned different lines. The wc command 
then took the output of uniq command.js and used it as its input which resulted in 

42     116    1091




3. Reverse String

Given a string, reverse the order of characters in each word within a sentence while maintaining the original word order and whitespace and return the string. 
To improve your problem-solving experience, use the suggested functions to solve the problem.




function reverseString(inputString) {
  let anArray = [];
  let string = inputString.split(" ");
  let reversedElements = string.forEach(element => {
    anArray.push(
      element
        .split("")
        .reverse()
        .join("")
    );
  });
  return anArray.join(" ");
}
